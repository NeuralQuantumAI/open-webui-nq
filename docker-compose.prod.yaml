version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vibecaas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vibecaas
      POSTGRES_USER: vibecaas
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vibecaas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vibecaas -d vibecaas"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vibecaas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - vibecaas-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: vibecaas-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - vibecaas-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      args:
        USE_CUDA: ${USE_CUDA:-false}
        USE_OLLAMA: ${USE_OLLAMA:-false}
        USE_CUDA_VER: ${USE_CUDA_VER:-cu128}
        USE_EMBEDDING_MODEL: ${USE_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
        USE_RERANKING_MODEL: ${USE_RERANKING_MODEL:-}
        USE_TIKTOKEN_ENCODING_NAME: ${USE_TIKTOKEN_ENCODING_NAME:-cl100k_base}
        UID: 1001
        GID: 1001
        USERNAME: vibecaas
    container_name: vibecaas-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://vibecaas:${POSTGRES_PASSWORD:-changeme}@postgres:5432/vibecaas
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # AI Configuration
      - OLLAMA_BASE_URL=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-}
      
      # Security
      - SCARF_NO_ANALYTICS=true
      - DO_NOT_TRACK=true
      - ANONYMIZED_TELEMETRY=false
      
      # Performance
      - UVICORN_WORKERS=${UVICORN_WORKERS:-2}
      - WORKER_CONNECTIONS=1000
    volumes:
      - backend_data:/app/backend/data
      - ./docker/logs:/app/logs
    networks:
      - vibecaas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        UID: 1001
        GID: 1001
        USERNAME: vibecaas
    container_name: vibecaas-frontend
    restart: unless-stopped
    networks:
      - vibecaas-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: vibecaas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - vibecaas-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  backend_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  vibecaas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16